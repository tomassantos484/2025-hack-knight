// This is a temporary version to help debug

// Receipt item interface
export interface ReceiptItem {
  id: number;
  receipt_id?: number;
  name: string;
  category: string;
  price: number;
  quantity: number;
  isEcoFriendly: boolean;
  carbonFootprint: number;
  alternativeSuggestion?: string;
}

// Receipt analysis interface
export interface ReceiptAnalysis {
  totalItems: number;
  ecoFriendlyItems: number;
  totalSpent: number;
  ecoFriendlySpent: number;
  ecoScore: number;
  totalCarbonFootprint: number;
  budsEarned: number;
  items: ReceiptItem[];
}

/**
 * Analyze receipt and return results
 * @param imageFile Receipt image file
 * @returns Receipt analysis results
 */
export const analyzeReceipt = async (imageFile: File): Promise<ReceiptAnalysis> => {
  try {
    // For testing, we'll just return mock data
    console.log('Analyzing receipt image:', imageFile.name);
    
    // Mock items
    const items: ReceiptItem[] = [
      {
        id: 1,
        name: 'Organic Apples',
        price: 4.99,
        quantity: 3,
        isEcoFriendly: true,
        category: 'Produce',
        carbonFootprint: 0.3
      },
      {
        id: 2,
        name: 'Reusable Water Bottle',
        price: 7.99,
        quantity: 1,
        isEcoFriendly: true,
        category: 'Home Goods',
        carbonFootprint: 1.2
      },
      {
        id: 3,
        name: 'Plastic Wrapped Cookies',
        price: 3.49,
        quantity: 1,
        isEcoFriendly: false,
        category: 'Snacks',
        carbonFootprint: 1.8,
        alternativeSuggestion: 'Try bulk bin cookies in your own container'
      },
      {
        id: 4,
        name: 'Paper Towels',
        price: 5.99,
        quantity: 1,
        isEcoFriendly: false,
        category: 'Household',
        carbonFootprint: 2.1,
        alternativeSuggestion: 'Switch to reusable cloth towels'
      },
      {
        id: 5,
        name: 'Single-Use Plastic Bags',
        price: 2.99,
        quantity: 1,
        isEcoFriendly: false,
        category: 'Household',
        carbonFootprint: 2.8,
        alternativeSuggestion: 'Use reusable shopping bags'
      }
    ];

    // Calculate totals
    const totalItems = items.length;
    const ecoFriendlyItems = items.filter(item => item.isEcoFriendly).length;
    const totalSpent = items.reduce((sum, item) => sum + item.price, 0);
    const ecoFriendlySpent = items
      .filter(item => item.isEcoFriendly)
      .reduce((sum, item) => sum + item.price, 0);
    
    // Calculate eco score
    const ecoScore = Math.round((ecoFriendlyItems / totalItems) * 100);
    
    // Calculate carbon footprint
    const totalCarbonFootprint = parseFloat(
      items.reduce((sum, item) => sum + item.carbonFootprint, 0).toFixed(1)
    );
    
    // Calculate buds earned
    const budsEarned = ecoFriendlyItems * 5 + Math.round(ecoScore / 10);
    
    return {
      totalItems,
      ecoFriendlyItems,
      totalSpent,
      ecoFriendlySpent,
      ecoScore,
      totalCarbonFootprint,
      budsEarned,
      items
    };
  } catch (error) {
    console.error('Error analyzing receipt:', error);
    throw error;
  }
}; 